# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1enW5yoSJ473AuiPaM7Ml7bm9VnEUOMiW

Importing the dependencies
"""

import numpy as np # Used for creating array
import pandas as pd #used for creating data frames
from sklearn.preprocessing import StandardScaler # standardize data to a common range
from sklearn.model_selection import train_test_split #spliting data into training and test data
from sklearn import svm #imported model support vector machine
from sklearn.metrics import accuracy_score # import accuracy score

"""Data Collection and Analysis

PIMA Diabetes Dataset
"""

#loading the diabetes data set to a pandas dataframe
diabetes_dataset = pd.read_csv('/content/diabetes.csv') #reads a comma separated values file into dataframe

#printing the first 5 rows of the dataset
diabetes_dataset.head() # give first 5 rows of dataset

# number of rows and columns in this dataset
diabetes_dataset.shape  # rows- people and col- heading

# getting the statistical measures of the data
diabetes_dataset.describe()  #mean standard deviation

diabetes_dataset['Outcome'].value_counts() #returns 0 and 1 label values

"""0 --> Non - Diabetic

1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()  #mean value for outcome that is diabetic and non diabetic

#separating the data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler() # taking one instance of it

scaler.fit(X) # fit

StandardScaler_data = scaler.transform(X)  # fit and transform the data so that it behaves in same way

print(StandardScaler_data)  # all values in range 0 to 1

X = StandardScaler_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2,stratify = Y, random_state = 2)

print(X.shape,X_train.shape,X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel = 'linear')

# training the support vector Machine Classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score: ',training_data_accuracy)

#accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score: ',test_data_accuracy)

"""Making a predictive System"""

input_data = (1,124,74,36,0,27.8,0.1,30)

#changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardised the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)

print(prediction)

if(prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

